// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	time "time"

	"github.com/go-redis/redis/v8"
	mock "github.com/stretchr/testify/mock"
)

// Cmdable is an autogenerated mock type for the Cmdable type
type Cmdable struct {
	mock.Mock
}

// Expire provides a mock function with given fields: ctx, key, expiration
func (_m *Cmdable) Expire(ctx context.Context, key string,
	expiration time.Duration) *redis.BoolCmd {
	ret := _m.Called(ctx, key, expiration)

	var r0 *redis.BoolCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Duration) *redis.BoolCmd); ok {
		r0 = rf(ctx, key, expiration)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.BoolCmd)
		}
	}

	return r0
}

// HDel provides a mock function with given fields: ctx, key, fields
func (_m *Cmdable) HDel(ctx context.Context, key string, fields ...string) *redis.IntCmd {
	_va := make([]interface{}, len(fields))
	for _i := range fields {
		_va[_i] = fields[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...string) *redis.IntCmd); ok {
		r0 = rf(ctx, key, fields...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}

// HGetAll provides a mock function with given fields: ctx, key
func (_m *Cmdable) HGetAll(ctx context.Context, key string) *redis.StringStringMapCmd {
	ret := _m.Called(ctx, key)

	var r0 *redis.StringStringMapCmd
	if rf, ok := ret.Get(0).(func(context.Context, string) *redis.StringStringMapCmd); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.StringStringMapCmd)
		}
	}

	return r0
}

// HSet provides a mock function with given fields: ctx, key, values
func (_m *Cmdable) HSet(ctx context.Context, key string, values ...interface{}) *redis.IntCmd {
	var _ca []interface{}
	_ca = append(_ca, ctx, key)
	_ca = append(_ca, values...)
	ret := _m.Called(_ca...)

	var r0 *redis.IntCmd
	if rf, ok := ret.Get(0).(func(context.Context, string, ...interface{}) *redis.IntCmd); ok {
		r0 = rf(ctx, key, values...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.IntCmd)
		}
	}

	return r0
}
