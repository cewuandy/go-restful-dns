// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/cewuandy/go-restful-dns/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// RecordRepo is an autogenerated mock type for the RecordRepo type
type RecordRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, record
func (_m *RecordRepo) Create(ctx context.Context, record *domain.Record) error {
	ret := _m.Called(ctx, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Record) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, name, rrType, class
func (_m *RecordRepo) Delete(ctx context.Context, name string, rrType uint16, class uint16) error {
	ret := _m.Called(ctx, name, rrType, class)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint16, uint16) error); ok {
		r0 = rf(ctx, name, rrType, class)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, name, rrType, class
func (_m *RecordRepo) Get(ctx context.Context, name string, rrType uint16, class uint16) (*domain.Record, error) {
	ret := _m.Called(ctx, name, rrType, class)

	var r0 *domain.Record
	if rf, ok := ret.Get(0).(func(context.Context, string, uint16, uint16) *domain.Record); ok {
		r0 = rf(ctx, name, rrType, class)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, uint16, uint16) error); ok {
		r1 = rf(ctx, name, rrType, class)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *RecordRepo) List(ctx context.Context) ([]*domain.Record, error) {
	ret := _m.Called(ctx)

	var r0 []*domain.Record
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Record); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Record)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, record
func (_m *RecordRepo) Update(ctx context.Context, record *domain.Record) error {
	ret := _m.Called(ctx, record)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Record) error); ok {
		r0 = rf(ctx, record)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
