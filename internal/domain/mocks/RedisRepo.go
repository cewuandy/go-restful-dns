// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RedisRepo is an autogenerated mock type for the RedisRepo type
type RedisRepo struct {
	mock.Mock
}

// FlushAll provides a mock function with given fields: ctx
func (_m *RedisRepo) FlushAll(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HDel provides a mock function with given fields: ctx, key
func (_m *RedisRepo) HDel(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HGetAll provides a mock function with given fields: ctx, key
func (_m *RedisRepo) HGetAll(ctx context.Context, key string) (map[string]string, error) {
	ret := _m.Called(ctx, key)

	var r0 map[string]string
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]string); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HSet provides a mock function with given fields: ctx, key, field, value, expiration
func (_m *RedisRepo) HSet(ctx context.Context, key string, field string, value string, expiration time.Duration) error {
	ret := _m.Called(ctx, key, field, value, expiration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, time.Duration) error); ok {
		r0 = rf(ctx, key, field, value, expiration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
