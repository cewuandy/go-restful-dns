// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	dns "github.com/miekg/dns"

	mock "github.com/stretchr/testify/mock"
)

// DNSUseCase is an autogenerated mock type for the DNSUseCase type
type DNSUseCase struct {
	mock.Mock
}

// QueryRedisCache provides a mock function with given fields: ctx, req
func (_m *DNSUseCase) QueryRedisCache(ctx context.Context, req *dns.Msg) (*dns.Msg, error) {
	ret := _m.Called(ctx, req)

	var r0 *dns.Msg
	if rf, ok := ret.Get(0).(func(context.Context, *dns.Msg) *dns.Msg); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dns.Msg) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryUpstream provides a mock function with given fields: ctx, req
func (_m *DNSUseCase) QueryUpstream(ctx context.Context, req *dns.Msg) (*dns.Msg, error) {
	ret := _m.Called(ctx, req)

	var r0 *dns.Msg
	if rf, ok := ret.Get(0).(func(context.Context, *dns.Msg) *dns.Msg); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dns.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *dns.Msg) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
